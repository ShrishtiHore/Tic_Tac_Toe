# -*- coding: utf-8 -*-
"""
Created on Tue Dec 25 12:30:36 2018

@author: Shrishti D Hore
"""
#making the board in the form of a numpad
def display_board(board):
    print("  | |")
    print(""+board[7]+" |"+board[8]+"| "+board[9])
    print("  | |")
    print("---------------------")
    print("  | |")
    print(""+board[4]+" |"+board[5]+"| "+board[6])
    print("  | |")
    print("---------------------")
    print("  | |")
    print(""+board[1]+" |"+board[2]+"| "+board[3])
    print("  | |")
#testing the board to see alignment  
test_board=["#","X","O","X","O","X","O","X","O","X"]
display_board(test_board)
#function to take input from player as X or O
def player_input():
    marker =""
    while not(marker =="X" or marker =="O"):
        marker=input("Player 1: Do you want to be X or O?").upper()
    if marker =="X":
        return("X","O")
    else:
        return("O","X")
player_input() 
#fuction to place the X or O in the desired position in 1-9 format in the board      
def place_marker(board,marker,position):
    board[position]=marker
place_marker(test_board,"A",6)
display_board(test_board)
#creating winning conditions for the board
def win_check(board,mark):
    return((board[7]==mark and board[8]==mark and board[9]==mark)or
    (board[4]==mark and board[5]==mark and board[6]==mark)or
    (board[1]==mark and board[2]==mark and board[3]==mark)or
    (board[1]==mark and board[4]==mark and board[7]==mark)or
    (board[2]==mark and board[5]==mark and board[8]==mark)or
    (board[3]==mark and board[6]==mark and board[9]==mark)or
    (board[1]==mark and board[5]==mark and board[9]==mark)or
    (board[3]==mark and board[5]==mark and board[7]==mark))
win_check(test_board,"X")
#function to decide which player goes first
import random
def chose_first():
    if random.randint(0,1)==0:
        return "Player 2"
    else:
        return "Player 1"
#function to indicate space in the board 
def space_check(board, position):
    return board[position]==" "
##function to indicate whether the board is full
def full_board_check(board):
    for i in range(1,10):
        if space_check(board, i):
            return False
    return True
#function to ask the player for next position 
def player_choice(board):
    position =0
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board,position):
        position = int(input("Choose your next position:"))
    return position
#function to ask a player if they want to play again 
def replay():
    return input("Do you want to play again? Enter Yes or No:").lower.startswith("y")
#making the game run through the functions made earlier
print("WELCOME TO TIC TAC TOE")
while True:
    theboard=[" "]*10
    player1_marker,player2_marker = player_input()
    turn = chose_first()
    print(turn+"  will go first")
    play_game=input("Are you ready to play? Enter Yes or No")
    if play_game.lower()[0]=="y":
        game_on=True
    else:
        game_on=False
    while game_on:
#for player1        
        if turn =="Player 1":
            display_board(theboard)
            position=player_choice(theboard)
            place_marker(theboard,player1_marker,position)
            if win_check(theboard,player1_marker):
                display_board(theboard)
                print("Congratulations !! You won the game !")
                game_on =False
            else:
                if full_board_check(theboard):
                    display_board(theboard)
                    print("The game is draw !")
                    break
                else:
                    turn="Player 2"
#for player2                    
        else:
           display_board(theboard)
           position = player_choice(theboard)
           place_marker(theboard, player2_marker, position)

           if win_check(theboard, player2_marker):
              display_board(theboard)
              print('Player 2 has won!')
              game_on = False
           else:
              if full_board_check(theboard):
                 display_board(theboard)
                 print('The game is a draw!')
                 break
              else:
                 turn = 'Player 1'
    if not replay():
        break
